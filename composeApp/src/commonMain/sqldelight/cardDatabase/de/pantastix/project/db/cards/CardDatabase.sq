--------------------------------------------------
-- Tabellendefinitionen
--------------------------------------------------

-- Speichert alle Set-Informationen, die von der TCGdex-API abgerufen werden.
-- Der Primärschlüssel ist die offizielle Set-ID (z.B. "sv10").
CREATE TABLE SetEntity (
    setId TEXT NOT NULL PRIMARY KEY,
    abbreviation TEXT,
    nameLocal TEXT NOT NULL,
    nameEn TEXT NOT NULL,
    logoUrl TEXT,
    cardCountOfficial INTEGER NOT NULL,
    cardCountTotal INTEGER NOT NULL,
    releaseDate TEXT
);

-- Speichert die Karten deiner persönlichen Sammlung.
CREATE TABLE PokemonCardEntity (
    id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT, -- Interne ID für die Sammlung
    setId TEXT NOT NULL,                           -- Verweis auf die Set-ID in SetEntity
    tcgDexCardId TEXT NOT NULL,             -- z.B. "sv10-051", stellt sicher, dass jede Karte nur einmal existiert
    nameLocal TEXT NOT NULL,
    nameEn TEXT NOT NULL,
    language TEXT NOT NULL,
    localId TEXT NOT NULL,                         -- Kartennummer im Set, z.B. "051"
    imageUrl TEXT,
    cardMarketLink TEXT,
    ownedCopies INTEGER NOT NULL DEFAULT 1,
    notes TEXT,
    rarity TEXT,
    hp INTEGER,
    types TEXT,                                    -- z.B. "Wasser,Eis"
    illustrator TEXT,
    stage TEXT,
    retreatCost INTEGER,
    regulationMark TEXT,

    -- HIER SIND DIE PREIS-FELDER:
    currentPrice REAL,
    lastPriceUpdate TEXT,

    -- Komplexe Daten als JSON-Strings
    variantsJson TEXT,
    abilitiesJson TEXT,
    attacksJson TEXT,
    legalJson TEXT,
    FOREIGN KEY(setId) REFERENCES SetEntity(setId),
    UNIQUE(tcgDexCardId, language)
);

--------------------------------------------------
-- Abfragen für Sets (SetEntity)
--------------------------------------------------

insertOrReplaceSet:
INSERT OR REPLACE INTO SetEntity (
    setId, abbreviation, nameLocal, nameEn, logoUrl, cardCountOfficial, cardCountTotal, releaseDate
) VALUES (?, ?, ?, ?, ?, ?, ?, ?);

updateSetAbbreviation:
UPDATE SetEntity SET abbreviation = :abbreviation WHERE setId = :setId;

selectAllSets:
SELECT * FROM SetEntity ORDER BY releaseDate ASC;

selectSetById:
SELECT * FROM SetEntity WHERE setId = ?;

clearAllSets:
DELETE FROM SetEntity;


--------------------------------------------------
-- Abfragen für Pokémon-Karten (PokemonCardEntity)
--------------------------------------------------

insertCard:
INSERT INTO PokemonCardEntity (
    setId, tcgDexCardId, nameLocal, nameEn, language, localId, imageUrl, cardMarketLink,
    ownedCopies, notes, rarity, hp, types, illustrator, stage, retreatCost,
    regulationMark, currentPrice, lastPriceUpdate, variantsJson,
    abilitiesJson, attacksJson, legalJson
) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?);


lastInsertedRowId:
SELECT last_insert_rowid();


selectAllCardInfos:
SELECT
    PokemonCardEntity.id,
    PokemonCardEntity.nameLocal,
    PokemonCardEntity.imageUrl,
    PokemonCardEntity.ownedCopies,
    PokemonCardEntity.currentPrice,
    SetEntity.nameLocal AS setName
FROM PokemonCardEntity
JOIN SetEntity ON PokemonCardEntity.setId = SetEntity.setId
ORDER BY SetEntity.releaseDate DESC, PokemonCardEntity.localId;


selectFullCardDetailsById:
SELECT
    PokemonCardEntity.*,
    SetEntity.nameLocal AS setName,
    SetEntity.abbreviation AS setAbbreviation,
    SetEntity.cardCountTotal
FROM PokemonCardEntity
JOIN SetEntity ON PokemonCardEntity.setId = SetEntity.setId
WHERE PokemonCardEntity.id = ?;


findCardByTcgDexIdAndLanguage:
SELECT * FROM PokemonCardEntity
WHERE tcgDexCardId = :tcgDexCardId AND language = :language;

findCardBySetAndLocalIdAndLanguage:
SELECT * FROM PokemonCardEntity
WHERE setId = :setId AND localId = :localId AND language = :language;

updateCardUserData:
UPDATE PokemonCardEntity
SET ownedCopies = :ownedCopies,
    notes = :notes,
    currentPrice = :currentPrice,
    lastPriceUpdate = :lastPriceUpdate
WHERE id = :id;


searchCardsByName:
SELECT
    PokemonCardEntity.id,
    PokemonCardEntity.nameLocal,
    PokemonCardEntity.imageUrl,
    PokemonCardEntity.ownedCopies,
    PokemonCardEntity.currentPrice,
    SetEntity.nameLocal AS setName
FROM PokemonCardEntity
JOIN SetEntity ON PokemonCardEntity.setId = SetEntity.setId
WHERE PokemonCardEntity.nameLocal LIKE '%' || :searchText || '%' OR PokemonCardEntity.nameEn LIKE '%' || :searchText || '%'
ORDER BY SetEntity.releaseDate DESC, PokemonCardEntity.localId;


deleteCardById:
DELETE FROM PokemonCardEntity WHERE id = ?;


clearAllPokemonCards:
DELETE FROM PokemonCardEntity;