--------------------------------------------------
-- Tabellendefinitionen
--------------------------------------------------

-- Speichert alle Set-Informationen, die von der TCGdex-API abgerufen werden.
-- Der Primärschlüssel ist die offizielle Set-ID (z.B. "sv10").
CREATE TABLE SetEntity (
    setId TEXT NOT NULL PRIMARY KEY,
    nameDe TEXT NOT NULL,
    nameEn TEXT NOT NULL,
    logoUrl TEXT,
    cardCountOfficial INTEGER NOT NULL,
    cardCountTotal INTEGER NOT NULL,
    releaseDate TEXT
);

-- Speichert die Karten deiner persönlichen Sammlung.
CREATE TABLE PokemonCardEntity (
    id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT, -- Interne ID für die Sammlung
    setId TEXT NOT NULL,                           -- Verweis auf die Set-ID in SetEntity
    tcgDexCardId TEXT NOT NULL UNIQUE,             -- z.B. "sv10-051", stellt sicher, dass jede Karte nur einmal existiert
    nameDe TEXT NOT NULL,
    nameEn TEXT NOT NULL,
    localId TEXT NOT NULL,                         -- Kartennummer im Set, z.B. "051"
    imageUrl TEXT,
    cardMarketLink TEXT,
    ownedCopies INTEGER NOT NULL DEFAULT 1,
    notes TEXT,
    rarity TEXT,
    hp INTEGER,
    types TEXT,                                    -- z.B. "Wasser,Eis"
    illustrator TEXT,
    stage TEXT,
    retreatCost INTEGER,
    regulationMark TEXT,

    -- HIER SIND DIE PREIS-FELDER:
    currentPrice REAL,
    lastPriceUpdate TEXT,

    -- Komplexe Daten als JSON-Strings
    variantsJson TEXT,
    abilitiesJson TEXT,
    attacksJson TEXT,
    legalJson TEXT,
    FOREIGN KEY(setId) REFERENCES SetEntity(setId)
);

--------------------------------------------------
-- Abfragen für Sets (SetEntity)
--------------------------------------------------

-- Fügt ein neues Set hinzu oder aktualisiert ein bestehendes, wenn die setId bereits existiert.
-- Perfekt, um die lokale Set-Datenbank zu befüllen oder zu aktualisieren.
insertOrReplaceSet:
INSERT OR REPLACE INTO SetEntity (
    setId, nameDe, nameEn, logoUrl, cardCountOfficial, cardCountTotal, releaseDate
) VALUES (?, ?, ?, ?, ?, ?, ?);

-- Wählt alle Sets aus, sortiert nach Erscheinungsdatum (neueste zuerst).
selectAllSets:
SELECT *
FROM SetEntity
ORDER BY releaseDate DESC;

-- Wählt ein spezifisches Set anhand seiner ID aus.
selectSetById:
SELECT *
FROM SetEntity
WHERE setId = ?;

-- Löscht alle Sets (nützlich für eine komplette Aktualisierung).
clearAllSets:
DELETE FROM SetEntity;


--------------------------------------------------
-- Abfragen für Pokémon-Karten (PokemonCardEntity)
--------------------------------------------------

-- Fügt eine neue Karte zur Sammlung hinzu.
insertCard:
INSERT INTO PokemonCardEntity (
    setId, tcgDexCardId, nameDe, nameEn, localId, imageUrl, cardMarketLink, ownedCopies, notes,
    rarity, hp, types, illustrator, stage, retreatCost, regulationMark,
    currentPrice, lastPriceUpdate, -- <-- Hier
    variantsJson, abilitiesJson, attacksJson, legalJson
) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?);

-- Gibt die ID der zuletzt eingefügten Zeile zurück.
lastInsertedRowId:
SELECT last_insert_rowid();

-- Wählt eine simple Repräsentation aller Karten für die Listenansicht.
-- Wählt bewusst nicht die großen JSON-Spalten aus, um die Abfrage schnell zu halten.
-- Verbindet (JOIN) mit der Set-Tabelle, um den Set-Namen direkt mit abzurufen.
selectAllCardInfos:
SELECT
    PokemonCardEntity.id,
    PokemonCardEntity.nameDe,
    PokemonCardEntity.imageUrl,
    PokemonCardEntity.ownedCopies,
    PokemonCardEntity.currentPrice,
    SetEntity.nameDe AS setName
FROM PokemonCardEntity
JOIN SetEntity ON PokemonCardEntity.setId = SetEntity.setId
ORDER BY SetEntity.releaseDate DESC, PokemonCardEntity.localId;

-- Wählt alle Details für eine einzelne Karte aus (für die Detailansicht).
selectFullCardDetailsById:
SELECT
    PokemonCardEntity.*,
    SetEntity.nameDe AS setNameDe,
    SetEntity.nameEn AS setNameEn,
    SetEntity.cardCountTotal
FROM PokemonCardEntity
JOIN SetEntity ON PokemonCardEntity.setId = SetEntity.setId
WHERE PokemonCardEntity.id = ?;

-- Wählt eine Karte anhand ihrer eindeutigen TCGdex-ID aus.
-- Nützlich um zu prüfen, ob eine Karte bereits in der Sammlung ist.
selectCardByTcgDexId:
SELECT *
FROM PokemonCardEntity
WHERE tcgDexCardId = ?;

-- Aktualisiert die benutzerdefinierten Felder einer Karte.
updateCardUserData:
UPDATE PokemonCardEntity
SET ownedCopies = :ownedCopies,
    notes = :notes,
    currentPrice = :currentPrice,
    lastPriceUpdate = :lastPriceUpdate
WHERE id = :id;

-- Sucht Karten, deren deutscher oder englischer Name einen Text enthält.
searchCardsByName:
SELECT
    PokemonCardEntity.id,
    PokemonCardEntity.nameDe,
    PokemonCardEntity.imageUrl,
    PokemonCardEntity.ownedCopies,
    PokemonCardEntity.currentPrice,
    SetEntity.nameDe AS setName
FROM PokemonCardEntity
JOIN SetEntity ON PokemonCardEntity.setId = SetEntity.setId
WHERE PokemonCardEntity.nameDe LIKE '%' || :searchText || '%' OR PokemonCardEntity.nameEn LIKE '%' || :searchText || '%'
ORDER BY SetEntity.releaseDate DESC, PokemonCardEntity.localId;

-- Löscht eine Karte anhand ihrer internen Sammlungs-ID.
deleteCardById:
DELETE FROM PokemonCardEntity
WHERE id = ?;

-- Löscht alle Karten aus der Sammlung.
clearAllPokemonCards:
DELETE FROM PokemonCardEntity;