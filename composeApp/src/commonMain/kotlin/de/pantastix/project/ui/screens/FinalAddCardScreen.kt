package de.pantastix.project.ui.screens

import androidx.compose.foundation.layout.*
import androidx.compose.foundation.rememberScrollState
import androidx.compose.foundation.text.ClickableText
import androidx.compose.foundation.text.KeyboardOptions
import androidx.compose.foundation.verticalScroll
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.ui.Modifier
import androidx.compose.ui.unit.dp
import de.pantastix.project.model.api.TcgDexCardResponse
import androidx.compose.ui.Alignment
import androidx.compose.ui.platform.LocalUriHandler
import androidx.compose.ui.text.SpanStyle
import androidx.compose.ui.text.buildAnnotatedString
import androidx.compose.ui.text.input.KeyboardType
import androidx.compose.ui.text.withStyle
import coil3.compose.AsyncImage
import de.pantastix.project.model.SetInfo
import jdk.internal.org.jline.utils.AttributedStringBuilder.append
import org.jetbrains.compose.ui.tooling.preview.Preview


@Composable
fun FinalAddCardScreen(
    cardDetails: TcgDexCardResponse,
    setInfo: SetInfo?,
    isLoading: Boolean,
    onConfirm: (
        cardDetails: TcgDexCardResponse,
        editedName: String,
        abbreviation: String?,
        price: Double?,
        marketLink: String
    ) -> Unit,
    onCancel: () -> Unit
) {
    var priceInput by remember { mutableStateOf("") }
    var abbreviationInput by remember(setInfo?.abbreviation) { mutableStateOf(setInfo?.abbreviation ?: "") }

    var linkInput by remember { mutableStateOf("") }
    var userHasEditedLink by remember { mutableStateOf(false) }

    LaunchedEffect(abbreviationInput, cardDetails, setInfo) {
        // Die entscheidende Bedingung: Führe die Automatik nur aus,
        // wenn der Nutzer noch nichts manuell geändert hat.
        if (!userHasEditedLink) {
            fun slugify(input: String) = input.replace("'", "").replace(" ", "-").replace(":", "")
            val finalAbbreviation = if (abbreviationInput.isNotBlank()) abbreviationInput.uppercase() else cardDetails.set.id.uppercase()

            val autoGeneratedLink = "https://www.cardmarket.com/de/Pokemon/Products/Singles/" +
                    "${slugify(setInfo?.nameEn ?: cardDetails.set.name)}/" +
                    "${slugify(cardDetails.name)}-${finalAbbreviation}${cardDetails.localId}"

            // Setze den angezeigten Text auf den neu generierten Link
            linkInput = autoGeneratedLink
        }
    }

    var nameInput by remember(cardDetails.name) {
        mutableStateOf(cardDetails.name)
    }


    Column(modifier = Modifier.fillMaxSize().verticalScroll(rememberScrollState()).padding(16.dp)) {
        Text(
            text = cardDetails.name,
            style = MaterialTheme.typography.headlineMedium,
            modifier = Modifier.fillMaxWidth().padding(bottom = 8.dp)
        )
        Text("${cardDetails.set.name} (${cardDetails.localId})",
            style = MaterialTheme.typography.headlineSmall,
            modifier = Modifier.fillMaxWidth().padding(bottom = 16.dp)
        )

        AsyncImage(
            model = cardDetails.image?.let { "$it/high.jpg" },
            contentDescription = cardDetails.name,
            modifier = Modifier.fillMaxWidth().height(250.dp).align(Alignment.CenterHorizontally)
        )
        Spacer(Modifier.height(16.dp))

        Text("Karte gefunden!", style = MaterialTheme.typography.headlineSmall, modifier = Modifier.padding(bottom = 8.dp))

        OutlinedTextField(
            value = nameInput,                  // 1. Lese den Wert aus unserem State
            onValueChange = { nameInput = it }, // 2. Schreibe die Eingabe zurück in unseren State
            readOnly = false,
            label = { Text("Kartenname") },
            modifier = Modifier.fillMaxWidth()
        )

        // Zeige das Kürzel-Feld nur an, wenn es noch nicht in der DB existiert.
        if (setInfo?.abbreviation == null) {
            OutlinedTextField(
                value = abbreviationInput,
                onValueChange = { abbreviationInput = it },
                label = { Text("Set-Kürzel für CardMarket (z.B. DRI)") },
                modifier = Modifier.fillMaxWidth(),
                supportingText = { Text("Wird für den Link benötigt und gespeichert.") }
            )
        }

        OutlinedTextField(
            value = linkInput, // Liest aus unserem neuen State
            onValueChange = {
                // Wenn der Nutzer tippt:
                // 1. Aktualisiere den Text im Feld sofort.
                linkInput = it
                // 2. Lege den Schalter um. Zukünftige automatische Updates werden blockiert.
                userHasEditedLink = true
            },
            readOnly = false, // Das Feld ist jetzt editierbar
            label = { Text("CardMarket Link") },
            modifier = Modifier.fillMaxWidth()
        )

        // Der TextButton verwendet jetzt auch den neuen State
        val uriHandler = LocalUriHandler.current
        TextButton(onClick = { uriHandler.openUri(linkInput) }, modifier = Modifier.align(Alignment.End)) {
            Text("Auf CardMarket öffnen")
        }

        HorizontalDivider(modifier = Modifier.padding(vertical = 8.dp))
        OutlinedTextField(
            value = priceInput,
            onValueChange = { priceInput = it },
            label = { Text("Dein Kaufpreis (€)") },
            keyboardOptions = KeyboardOptions(keyboardType = KeyboardType.Number),
            modifier = Modifier.fillMaxWidth()
        )

        Spacer(Modifier.weight(1f))

        Box(contentAlignment = Alignment.Center, modifier = Modifier.fillMaxWidth()) {
            if (isLoading) {
                CircularProgressIndicator()
            } else {
                Row(horizontalArrangement = Arrangement.spacedBy(8.dp)) {
                    OutlinedButton(onClick = onCancel, modifier = Modifier.weight(1f)) { Text("Abbrechen") }
                    Button(onClick = {
                        println("Speichere Karte: $nameInput, $abbreviationInput, $priceInput, $linkInput")
                        onConfirm(cardDetails, nameInput, abbreviationInput.ifBlank { null }, priceInput.replace(",", ".").toDoubleOrNull(), linkInput)
                                     },
                        modifier = Modifier.weight(1f)
                    ) {
                        Text("Speichern")
                    }
                }
            }
        }
    }
}